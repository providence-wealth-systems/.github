name: Build & Publish Docker Image
on:
  workflow_call:
jobs:
  determine_if_python:
    name: Determine If Python Repository
    runs-on: ubuntu-22.04
    continue-on-error: true
    outputs:
      file_exists: ${{ steps.is_python.outputs.files_exists }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
      - name: Check If Python
        id: is_python
        uses: andstor/file-existence-action@v3
        with:
          files: 'app/main.py'
  determine_if_js:
    name: Determine If Javascript Repository
    runs-on: ubuntu-22.04
    continue-on-error: true
    outputs:
      file_exists: ${{ steps.is_js.outputs.files_exists }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
      - name: Check If Javascript
        id: is_js
        uses: andstor/file-existence-action@v3
        with:
          files: 'package.json'
  determine_if_dockerized_repository:
    name: Check if Dockerfile Exists
    runs-on: ubuntu-22.04
    continue-on-error: true
    outputs:
      file_exists: ${{ steps.is_dockerized_repo.outputs.files_exists }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
      - name: Check if Dockerfile exists
        id: is_dockerized_repo
        uses: andstor/file-existence-action@v3
        with:
          files: 'Dockerfile'
  create_container_version_python:
    runs-on: ubuntu-22.04
    needs: [determine_if_dockerized_repository, determine_if_python]
    if: ${{ always() && needs.determine_if_dockerized_repository.outputs.file_exists == 'true'  && needs.determine_if_python.outputs.file_exists == 'true'}}
    env: 
      REPO_NAME: "${{ github.event.repository.name }}"
    outputs:
      CONTAINER_NAME: ${{ steps.final_output.outputs.CONTAINER_NAME }}
    steps:
      - uses: actions/checkout@v4
        with:
            token: ${{ secrets.WORKFLOW_TOKEN }}
      - name: Get Application Version from app/config_default.yaml
        run: echo """VERSION=$(grep 'BUILD_VERSION' app/config_default.yaml | cut -d '"' -f 2)""" >> $GITHUB_ENV
      - name: Set Repo Name To Lowercase
        run: echo REPO_NAME_LOWER_CASE="${REPO_NAME,,}" >> $GITHUB_ENV
      - name: Check if not main branch
        if: github.ref != 'refs/heads/main'
        run: echo CONTAINER_NAME="$REPO_NAME_LOWER_CASE":"$VERSION"-${{ github.sha }} >> $GITHUB_ENV
      - name: Check if main branch
        if: github.ref == 'refs/heads/main'
        run: echo CONTAINER_NAME="$REPO_NAME_LOWER_CASE":"$VERSION" >> $GITHUB_ENV
      - name: Set Final Container Name
        id: final_output
        run: echo CONTAINER_NAME="$CONTAINER_NAME" >> $GITHUB_OUTPUT
  create_container_version_js:
    runs-on: ubuntu-22.04
    needs: [determine_if_dockerized_repository, determine_if_js]
    if: ${{ always() && needs.determine_if_dockerized_repository.outputs.file_exists == 'true'  && needs.determine_if_js.outputs.file_exists == 'true'}}
    env: 
      REPO_NAME: "${{ github.event.repository.name }}"
    outputs:
      CONTAINER_NAME: ${{ steps.final_output.outputs.CONTAINER_NAME }}
    steps:
      - uses: actions/checkout@v4
        with:
            token: ${{ secrets.WORKFLOW_TOKEN }}
      - name: Get Application Version from app/config_default.yaml
        run: echo VERSION=$(jq -r .version package.json) >> $GITHUB_ENV
      - name: Set Repo Name To Lowercase
        run: echo REPO_NAME_LOWER_CASE="${REPO_NAME,,}" >> $GITHUB_ENV
      - name: Check if not main branch
        if: github.ref != 'refs/heads/main'
        run: echo CONTAINER_NAME="$REPO_NAME_LOWER_CASE":"$VERSION"-${{ github.sha }} >> $GITHUB_ENV
      - name: Check if main branch
        if: github.ref == 'refs/heads/main'
        run: echo CONTAINER_NAME="$REPO_NAME_LOWER_CASE":"$VERSION" >> $GITHUB_ENV
      - name: Set Final Container Name
        id: final_output
        run: echo CONTAINER_NAME="$CONTAINER_NAME" >> $GITHUB_OUTPUT
  build_and_publish_container_python:
    name: Build & Publish Dockerfile (Python)
    needs: create_container_version_python
    runs-on: ubuntu-22.04
    env:
      CONTAINER_NAME: ${{ needs.create_container_version_python.outputs.CONTAINER_NAME }}
    steps:
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ github.ref == 'refs/heads/main' && secrets.AWS_ACCESS_KEY_ID_PROD || secrets.AWS_ACCESS_KEY_ID_STAGE }}
          aws-secret-access-key: ${{ github.ref == 'refs/heads/main' && secrets.AWS_SECRET_ACCESS_KEY_PROD || secrets.AWS_SECRET_ACCESS_KEY_STAGE }}
          aws-region: us-east-1
      - uses: actions/checkout@v4
        with:
            token: ${{ secrets.WORKFLOW_TOKEN }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - run: echo CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ vars.CODEARTIFACT_DOMAIN}} --domain-owner ${{ vars.CODEARTIFACT_DOMAIN_OWNER }} --query authorizationToken --output text --region us-east-1 ) >> $GITHUB_ENV
      - run: echo PIP_INDEX_URL="https://aws:$CODEARTIFACT_AUTH_TOKEN@${{ vars.CODEARTIFACT_DOMAIN }}-${{ vars.CODEARTIFACT_DOMAIN_OWNER }}.d.codeartifact.us-east-1.amazonaws.com/pypi/${{ vars.CODEARTIFACT_SHARED_CLASS_REPOSITORY }}/simple/" >> $GITHUB_ENV
      - uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: PIP_INDEX_URL=${{ env.PIP_INDEX_URL }}
          tags: providencewealth/${{ env.CONTAINER_NAME }}
  build_and_publish_container_js:
    name: Build & Publish Dockerfile (JavaScript)
    needs: create_container_version_js
    runs-on: ubuntu-22.04
    env:
      CONTAINER_NAME: ${{ needs.create_container_version_js.outputs.CONTAINER_NAME }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: providencewealth/${{ env.CONTAINER_NAME }}